plugins {
    // 在第二部定义的插件ID
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
//    id 'com.alibaba.arouter'
}
import com.zwl.cit.plugin.*

//apply from: "../module.build.gradle"

android {

    compileSdkVersion Versions.compileSdkVersion
    buildToolsVersion Versions.buildToolsVersion

    defaultConfig {
        applicationId "com.zwl.cit2"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        externalNativeBuild {
//            cmake {
//                cppFlags "-std=c++17"
//            }
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jni.srcDirs = []//禁止gradle 自动编译，使用已经编译好的So库
            jniLibs.srcDirs = ['src/main/jniLibs', 'libs']//指向要使用的库文件//的路径，前边的是自己项目的，后边的是第三方的so
        }
    }
//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//            version "3.10.2"
//        }
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    //开启dataBinding
    buildFeatures {
        dataBinding true
    }
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', 'armeabi-v7a'
            universalApk true
        }
    }
    packagingOptions {
/*        pickFirst 'lib/arm64-v8a/libopencv_java3.so'
        pickFirst 'lib/armeabi/libopencv_java3.so'
        pickFirst 'lib/armeabi-v7a/libopencv_java3.so'
        pickFirst 'lib/mips/libopencv_java3.so'
        pickFirst 'lib/mips64/libopencv_java3.so'
        pickFirst 'lib/x86/libopencv_java3.so'
        pickFirst 'lib/x86_64/libopencv_java3.so'*/
        pickFirst 'lib/*/libopencv_java3.so'
    }

    //避免编译不能用于在编译类路径中发现的注解处理器，因为它们中的任何更改都需要运行注解处理任务
    kapt.includeCompileClasspath = false
    kapt.generateStubs = true
}

kapt {
    correctErrorTypes true
    arguments {
        //arouter每个模块需要添加
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {

    implementation Kt.stdlib
    implementation AndroidX.coreKtx
    implementation AndroidX.appcompat
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //hilt
    implementation "com.google.dagger:hilt-android:2.35.1"
    kapt "com.google.dagger:hilt-android-compiler:2.35.1"

    // For instrumentation tests
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.35.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.35.1'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.35.1'
    kaptTest 'com.google.dagger:hilt-compiler:2.35.1'


    def work_version = "2.5.0"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"

    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"

    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"

    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"
//    implementation project(':openCVLibrary330')
//    implementation project(':opencvdemo')
    implementation 'androidx.multidex:multidex:2.0.1'
    //preference
    implementation 'androidx.preference:preference:1.1.0'

    //arouter每个模块需要添加
    implementation Arouter.api
    kapt Arouter.compiler

//    implementation project(':JavaPoetDemo')
//    implementation project(':test-annotation')
//    kapt project(':test-complier')
//    implementation project(':common')
//    compileOnly files("${rootProject}/common/build/outputs/mypluginlibrary.jar")
    //先对common模块 makejar
    compileOnly files("${rootDir}/common/build/outputs/aar/common-debug.aar")
}

assemble.doLast {
    android.applicationVariants.all { variant ->
        // Copy Release artifact to HostApp's assets and rename
        if (variant.name == "release") {
            variant.outputs.each { output ->
                File originFile = output.outputFile
                println originFile.absolutePath
                copy {
                    from originFile
                    into "$rootDir/app/src/main/assets"
                    rename(originFile.name, "plugin1.apk")
                }
            }
        }
    }
}